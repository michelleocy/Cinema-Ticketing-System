'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Database")>  _
Partial Public Class demoDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBooking(instance As Booking)
    End Sub
  Partial Private Sub UpdateBooking(instance As Booking)
    End Sub
  Partial Private Sub DeleteBooking(instance As Booking)
    End Sub
  Partial Private Sub InsertHall(instance As Hall)
    End Sub
  Partial Private Sub UpdateHall(instance As Hall)
    End Sub
  Partial Private Sub DeleteHall(instance As Hall)
    End Sub
  Partial Private Sub InsertMovie(instance As Movie)
    End Sub
  Partial Private Sub UpdateMovie(instance As Movie)
    End Sub
  Partial Private Sub DeleteMovie(instance As Movie)
    End Sub
  Partial Private Sub InsertSeat(instance As Seat)
    End Sub
  Partial Private Sub UpdateSeat(instance As Seat)
    End Sub
  Partial Private Sub DeleteSeat(instance As Seat)
    End Sub
  Partial Private Sub InsertMovieSchedule(instance As MovieSchedule)
    End Sub
  Partial Private Sub UpdateMovieSchedule(instance As MovieSchedule)
    End Sub
  Partial Private Sub DeleteMovieSchedule(instance As MovieSchedule)
    End Sub
  Partial Private Sub InsertPurchasedSeat(instance As PurchasedSeat)
    End Sub
  Partial Private Sub UpdatePurchasedSeat(instance As PurchasedSeat)
    End Sub
  Partial Private Sub DeletePurchasedSeat(instance As PurchasedSeat)
    End Sub
  Partial Private Sub InsertPurchase(instance As Purchase)
    End Sub
  Partial Private Sub UpdatePurchase(instance As Purchase)
    End Sub
  Partial Private Sub DeletePurchase(instance As Purchase)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Cinema_Ticketing_System.My.MySettings.Default.BookingConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Bookings() As System.Data.Linq.Table(Of Booking)
		Get
			Return Me.GetTable(Of Booking)
		End Get
	End Property
	
	Public ReadOnly Property Halls() As System.Data.Linq.Table(Of Hall)
		Get
			Return Me.GetTable(Of Hall)
		End Get
	End Property
	
	Public ReadOnly Property Movies() As System.Data.Linq.Table(Of Movie)
		Get
			Return Me.GetTable(Of Movie)
		End Get
	End Property
	
	Public ReadOnly Property Seats() As System.Data.Linq.Table(Of Seat)
		Get
			Return Me.GetTable(Of Seat)
		End Get
	End Property
	
	Public ReadOnly Property MovieSchedules() As System.Data.Linq.Table(Of MovieSchedule)
		Get
			Return Me.GetTable(Of MovieSchedule)
		End Get
	End Property
	
	Public ReadOnly Property PurchasedSeats() As System.Data.Linq.Table(Of PurchasedSeat)
		Get
			Return Me.GetTable(Of PurchasedSeat)
		End Get
	End Property
	
	Public ReadOnly Property Purchases() As System.Data.Linq.Table(Of Purchase)
		Get
			Return Me.GetTable(Of Purchase)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Booking")>  _
Partial Public Class Booking
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BookingID As Integer
	
	Private _CustomerName As String
	
	Private _CustomerIC As String
	
	Private _MovieScheduleID As Integer
	
	Private _AmountOfPeople As Integer
	
	Private _BookingDate As Date
	
	Private _MovieSchedule As EntityRef(Of MovieSchedule)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBookingIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBookingIDChanged()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnCustomerICChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerICChanged()
    End Sub
    Partial Private Sub OnMovieScheduleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMovieScheduleIDChanged()
    End Sub
    Partial Private Sub OnAmountOfPeopleChanging(value As Integer)
    End Sub
    Partial Private Sub OnAmountOfPeopleChanged()
    End Sub
    Partial Private Sub OnBookingDateChanging(value As Date)
    End Sub
    Partial Private Sub OnBookingDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MovieSchedule = CType(Nothing, EntityRef(Of MovieSchedule))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BookingID() As Integer
		Get
			Return Me._BookingID
		End Get
		Set
			If ((Me._BookingID = value)  _
						= false) Then
				Me.OnBookingIDChanging(value)
				Me.SendPropertyChanging
				Me._BookingID = value
				Me.SendPropertyChanged("BookingID")
				Me.OnBookingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me.OnCustomerNameChanging(value)
				Me.SendPropertyChanging
				Me._CustomerName = value
				Me.SendPropertyChanged("CustomerName")
				Me.OnCustomerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerIC", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property CustomerIC() As String
		Get
			Return Me._CustomerIC
		End Get
		Set
			If (String.Equals(Me._CustomerIC, value) = false) Then
				Me.OnCustomerICChanging(value)
				Me.SendPropertyChanging
				Me._CustomerIC = value
				Me.SendPropertyChanged("CustomerIC")
				Me.OnCustomerICChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MovieScheduleID", DbType:="Int NOT NULL")>  _
	Public Property MovieScheduleID() As Integer
		Get
			Return Me._MovieScheduleID
		End Get
		Set
			If ((Me._MovieScheduleID = value)  _
						= false) Then
				If Me._MovieSchedule.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMovieScheduleIDChanging(value)
				Me.SendPropertyChanging
				Me._MovieScheduleID = value
				Me.SendPropertyChanged("MovieScheduleID")
				Me.OnMovieScheduleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmountOfPeople", DbType:="Int NOT NULL")>  _
	Public Property AmountOfPeople() As Integer
		Get
			Return Me._AmountOfPeople
		End Get
		Set
			If ((Me._AmountOfPeople = value)  _
						= false) Then
				Me.OnAmountOfPeopleChanging(value)
				Me.SendPropertyChanging
				Me._AmountOfPeople = value
				Me.SendPropertyChanged("AmountOfPeople")
				Me.OnAmountOfPeopleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BookingDate", DbType:="Date NOT NULL")>  _
	Public Property BookingDate() As Date
		Get
			Return Me._BookingDate
		End Get
		Set
			If ((Me._BookingDate = value)  _
						= false) Then
				Me.OnBookingDateChanging(value)
				Me.SendPropertyChanging
				Me._BookingDate = value
				Me.SendPropertyChanged("BookingDate")
				Me.OnBookingDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MovieSchedule_Booking", Storage:="_MovieSchedule", ThisKey:="MovieScheduleID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property MovieSchedule() As MovieSchedule
		Get
			Return Me._MovieSchedule.Entity
		End Get
		Set
			Dim previousValue As MovieSchedule = Me._MovieSchedule.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MovieSchedule.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MovieSchedule.Entity = Nothing
					previousValue.Bookings.Remove(Me)
				End If
				Me._MovieSchedule.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Bookings.Add(Me)
					Me._MovieScheduleID = value.Id
				Else
					Me._MovieScheduleID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MovieSchedule")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Hall")>  _
Partial Public Class Hall
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Number As Integer
	
	Private _Status As String
	
	Private _Seats As EntitySet(Of Seat)
	
	Private _MovieSchedules As EntitySet(Of MovieSchedule)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Seats = New EntitySet(Of Seat)(AddressOf Me.attach_Seats, AddressOf Me.detach_Seats)
		Me._MovieSchedules = New EntitySet(Of MovieSchedule)(AddressOf Me.attach_MovieSchedules, AddressOf Me.detach_MovieSchedules)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Int NOT NULL")>  _
	Public Property Number() As Integer
		Get
			Return Me._Number
		End Get
		Set
			If ((Me._Number = value)  _
						= false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hall_Seat", Storage:="_Seats", ThisKey:="Id", OtherKey:="HallId")>  _
	Public Property Seats() As EntitySet(Of Seat)
		Get
			Return Me._Seats
		End Get
		Set
			Me._Seats.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hall_MovieSchedule", Storage:="_MovieSchedules", ThisKey:="Id", OtherKey:="HallId")>  _
	Public Property MovieSchedules() As EntitySet(Of MovieSchedule)
		Get
			Return Me._MovieSchedules
		End Get
		Set
			Me._MovieSchedules.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Seats(ByVal entity As Seat)
		Me.SendPropertyChanging
		entity.Hall = Me
	End Sub
	
	Private Sub detach_Seats(ByVal entity As Seat)
		Me.SendPropertyChanging
		entity.Hall = Nothing
	End Sub
	
	Private Sub attach_MovieSchedules(ByVal entity As MovieSchedule)
		Me.SendPropertyChanging
		entity.Hall = Me
	End Sub
	
	Private Sub detach_MovieSchedules(ByVal entity As MovieSchedule)
		Me.SendPropertyChanging
		entity.Hall = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Movie")>  _
Partial Public Class Movie
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _MovieName As String
	
	Private _MovieDescription As String
	
	Private _MoviePoster As System.Data.Linq.Binary
	
	Private _Duration As System.TimeSpan
	
	Private _MovieSchedules As EntitySet(Of MovieSchedule)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnMovieNameChanging(value As String)
    End Sub
    Partial Private Sub OnMovieNameChanged()
    End Sub
    Partial Private Sub OnMovieDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnMovieDescriptionChanged()
    End Sub
    Partial Private Sub OnMoviePosterChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnMoviePosterChanged()
    End Sub
    Partial Private Sub OnDurationChanging(value As System.TimeSpan)
    End Sub
    Partial Private Sub OnDurationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MovieSchedules = New EntitySet(Of MovieSchedule)(AddressOf Me.attach_MovieSchedules, AddressOf Me.detach_MovieSchedules)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MovieName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property MovieName() As String
		Get
			Return Me._MovieName
		End Get
		Set
			If (String.Equals(Me._MovieName, value) = false) Then
				Me.OnMovieNameChanging(value)
				Me.SendPropertyChanging
				Me._MovieName = value
				Me.SendPropertyChanged("MovieName")
				Me.OnMovieNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MovieDescription", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property MovieDescription() As String
		Get
			Return Me._MovieDescription
		End Get
		Set
			If (String.Equals(Me._MovieDescription, value) = false) Then
				Me.OnMovieDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._MovieDescription = value
				Me.SendPropertyChanged("MovieDescription")
				Me.OnMovieDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MoviePoster", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MoviePoster() As System.Data.Linq.Binary
		Get
			Return Me._MoviePoster
		End Get
		Set
			If (Object.Equals(Me._MoviePoster, value) = false) Then
				Me.OnMoviePosterChanging(value)
				Me.SendPropertyChanging
				Me._MoviePoster = value
				Me.SendPropertyChanged("MoviePoster")
				Me.OnMoviePosterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duration", DbType:="Time NOT NULL")>  _
	Public Property Duration() As System.TimeSpan
		Get
			Return Me._Duration
		End Get
		Set
			If ((Me._Duration = value)  _
						= false) Then
				Me.OnDurationChanging(value)
				Me.SendPropertyChanging
				Me._Duration = value
				Me.SendPropertyChanged("Duration")
				Me.OnDurationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Movie_MovieSchedule", Storage:="_MovieSchedules", ThisKey:="Id", OtherKey:="MovieID")>  _
	Public Property MovieSchedules() As EntitySet(Of MovieSchedule)
		Get
			Return Me._MovieSchedules
		End Get
		Set
			Me._MovieSchedules.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MovieSchedules(ByVal entity As MovieSchedule)
		Me.SendPropertyChanging
		entity.Movie = Me
	End Sub
	
	Private Sub detach_MovieSchedules(ByVal entity As MovieSchedule)
		Me.SendPropertyChanging
		entity.Movie = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Seat")>  _
Partial Public Class Seat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _SeatNo As String
	
	Private _Status As String
	
	Private _HallId As Integer
	
	Private _Hall As EntityRef(Of Hall)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnSeatNoChanging(value As String)
    End Sub
    Partial Private Sub OnSeatNoChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnHallIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnHallIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Hall = CType(Nothing, EntityRef(Of Hall))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeatNo", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property SeatNo() As String
		Get
			Return Me._SeatNo
		End Get
		Set
			If (String.Equals(Me._SeatNo, value) = false) Then
				Me.OnSeatNoChanging(value)
				Me.SendPropertyChanging
				Me._SeatNo = value
				Me.SendPropertyChanged("SeatNo")
				Me.OnSeatNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HallId", DbType:="Int NOT NULL")>  _
	Public Property HallId() As Integer
		Get
			Return Me._HallId
		End Get
		Set
			If ((Me._HallId = value)  _
						= false) Then
				If Me._Hall.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnHallIdChanging(value)
				Me.SendPropertyChanging
				Me._HallId = value
				Me.SendPropertyChanged("HallId")
				Me.OnHallIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hall_Seat", Storage:="_Hall", ThisKey:="HallId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Hall() As Hall
		Get
			Return Me._Hall.Entity
		End Get
		Set
			Dim previousValue As Hall = Me._Hall.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Hall.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Hall.Entity = Nothing
					previousValue.Seats.Remove(Me)
				End If
				Me._Hall.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Seats.Add(Me)
					Me._HallId = value.Id
				Else
					Me._HallId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Hall")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MovieSchedule")>  _
Partial Public Class MovieSchedule
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _MovieID As Integer
	
	Private _HallId As Integer
	
	Private _Date As Date
	
	Private _Time As Integer
	
	Private _TicketPrice As Decimal
	
	Private _Bookings As EntitySet(Of Booking)
	
	Private _Purchases As EntitySet(Of Purchase)
	
	Private _Hall As EntityRef(Of Hall)
	
	Private _Movie As EntityRef(Of Movie)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnMovieIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMovieIDChanged()
    End Sub
    Partial Private Sub OnHallIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnHallIdChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As Date)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnTimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnTimeChanged()
    End Sub
    Partial Private Sub OnTicketPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTicketPriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Bookings = New EntitySet(Of Booking)(AddressOf Me.attach_Bookings, AddressOf Me.detach_Bookings)
		Me._Purchases = New EntitySet(Of Purchase)(AddressOf Me.attach_Purchases, AddressOf Me.detach_Purchases)
		Me._Hall = CType(Nothing, EntityRef(Of Hall))
		Me._Movie = CType(Nothing, EntityRef(Of Movie))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MovieID", DbType:="Int NOT NULL")>  _
	Public Property MovieID() As Integer
		Get
			Return Me._MovieID
		End Get
		Set
			If ((Me._MovieID = value)  _
						= false) Then
				If Me._Movie.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMovieIDChanging(value)
				Me.SendPropertyChanging
				Me._MovieID = value
				Me.SendPropertyChanged("MovieID")
				Me.OnMovieIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HallId", DbType:="Int NOT NULL")>  _
	Public Property HallId() As Integer
		Get
			Return Me._HallId
		End Get
		Set
			If ((Me._HallId = value)  _
						= false) Then
				If Me._Hall.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnHallIdChanging(value)
				Me.SendPropertyChanging
				Me._HallId = value
				Me.SendPropertyChanged("HallId")
				Me.OnHallIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date NOT NULL")>  _
	Public Property [Date]() As Date
		Get
			Return Me._Date
		End Get
		Set
			If ((Me._Date = value)  _
						= false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Time", DbType:="Int NOT NULL")>  _
	Public Property Time() As Integer
		Get
			Return Me._Time
		End Get
		Set
			If ((Me._Time = value)  _
						= false) Then
				Me.OnTimeChanging(value)
				Me.SendPropertyChanging
				Me._Time = value
				Me.SendPropertyChanged("Time")
				Me.OnTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TicketPrice", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property TicketPrice() As Decimal
		Get
			Return Me._TicketPrice
		End Get
		Set
			If ((Me._TicketPrice = value)  _
						= false) Then
				Me.OnTicketPriceChanging(value)
				Me.SendPropertyChanging
				Me._TicketPrice = value
				Me.SendPropertyChanged("TicketPrice")
				Me.OnTicketPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MovieSchedule_Booking", Storage:="_Bookings", ThisKey:="Id", OtherKey:="MovieScheduleID")>  _
	Public Property Bookings() As EntitySet(Of Booking)
		Get
			Return Me._Bookings
		End Get
		Set
			Me._Bookings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MovieSchedule_Purchase", Storage:="_Purchases", ThisKey:="Id", OtherKey:="MovieScheduleID")>  _
	Public Property Purchases() As EntitySet(Of Purchase)
		Get
			Return Me._Purchases
		End Get
		Set
			Me._Purchases.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hall_MovieSchedule", Storage:="_Hall", ThisKey:="HallId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Hall() As Hall
		Get
			Return Me._Hall.Entity
		End Get
		Set
			Dim previousValue As Hall = Me._Hall.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Hall.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Hall.Entity = Nothing
					previousValue.MovieSchedules.Remove(Me)
				End If
				Me._Hall.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MovieSchedules.Add(Me)
					Me._HallId = value.Id
				Else
					Me._HallId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Hall")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Movie_MovieSchedule", Storage:="_Movie", ThisKey:="MovieID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Movie() As Movie
		Get
			Return Me._Movie.Entity
		End Get
		Set
			Dim previousValue As Movie = Me._Movie.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Movie.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Movie.Entity = Nothing
					previousValue.MovieSchedules.Remove(Me)
				End If
				Me._Movie.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MovieSchedules.Add(Me)
					Me._MovieID = value.Id
				Else
					Me._MovieID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Movie")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.MovieSchedule = Me
	End Sub
	
	Private Sub detach_Bookings(ByVal entity As Booking)
		Me.SendPropertyChanging
		entity.MovieSchedule = Nothing
	End Sub
	
	Private Sub attach_Purchases(ByVal entity As Purchase)
		Me.SendPropertyChanging
		entity.MovieSchedule = Me
	End Sub
	
	Private Sub detach_Purchases(ByVal entity As Purchase)
		Me.SendPropertyChanging
		entity.MovieSchedule = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PurchasedSeat")>  _
Partial Public Class PurchasedSeat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PurchasedSeatID As Integer
	
	Private _SeatNum As String
	
	Private _PurchaseID As Integer
	
	Private _Purchase As EntityRef(Of Purchase)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPurchasedSeatIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPurchasedSeatIDChanged()
    End Sub
    Partial Private Sub OnSeatNumChanging(value As String)
    End Sub
    Partial Private Sub OnSeatNumChanged()
    End Sub
    Partial Private Sub OnPurchaseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPurchaseIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Purchase = CType(Nothing, EntityRef(Of Purchase))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasedSeatID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PurchasedSeatID() As Integer
		Get
			Return Me._PurchasedSeatID
		End Get
		Set
			If ((Me._PurchasedSeatID = value)  _
						= false) Then
				Me.OnPurchasedSeatIDChanging(value)
				Me.SendPropertyChanging
				Me._PurchasedSeatID = value
				Me.SendPropertyChanged("PurchasedSeatID")
				Me.OnPurchasedSeatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeatNum", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property SeatNum() As String
		Get
			Return Me._SeatNum
		End Get
		Set
			If (String.Equals(Me._SeatNum, value) = false) Then
				Me.OnSeatNumChanging(value)
				Me.SendPropertyChanging
				Me._SeatNum = value
				Me.SendPropertyChanged("SeatNum")
				Me.OnSeatNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseID", DbType:="Int NOT NULL")>  _
	Public Property PurchaseID() As Integer
		Get
			Return Me._PurchaseID
		End Get
		Set
			If ((Me._PurchaseID = value)  _
						= false) Then
				If Me._Purchase.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPurchaseIDChanging(value)
				Me.SendPropertyChanging
				Me._PurchaseID = value
				Me.SendPropertyChanged("PurchaseID")
				Me.OnPurchaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Purchase_PurchasedSeat", Storage:="_Purchase", ThisKey:="PurchaseID", OtherKey:="PurchaseID", IsForeignKey:=true)>  _
	Public Property Purchase() As Purchase
		Get
			Return Me._Purchase.Entity
		End Get
		Set
			Dim previousValue As Purchase = Me._Purchase.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Purchase.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Purchase.Entity = Nothing
					previousValue.PurchasedSeats.Remove(Me)
				End If
				Me._Purchase.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PurchasedSeats.Add(Me)
					Me._PurchaseID = value.PurchaseID
				Else
					Me._PurchaseID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Purchase")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Purchase")>  _
Partial Public Class Purchase
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PurchaseID As Integer
	
	Private _MovieScheduleID As Integer
	
	Private _VisitDate As Date
	
	Private _TotalPrice As Decimal
	
	Private _PurchasedSeats As EntitySet(Of PurchasedSeat)
	
	Private _MovieSchedule As EntityRef(Of MovieSchedule)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPurchaseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPurchaseIDChanged()
    End Sub
    Partial Private Sub OnMovieScheduleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMovieScheduleIDChanged()
    End Sub
    Partial Private Sub OnVisitDateChanging(value As Date)
    End Sub
    Partial Private Sub OnVisitDateChanged()
    End Sub
    Partial Private Sub OnTotalPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTotalPriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PurchasedSeats = New EntitySet(Of PurchasedSeat)(AddressOf Me.attach_PurchasedSeats, AddressOf Me.detach_PurchasedSeats)
		Me._MovieSchedule = CType(Nothing, EntityRef(Of MovieSchedule))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PurchaseID() As Integer
		Get
			Return Me._PurchaseID
		End Get
		Set
			If ((Me._PurchaseID = value)  _
						= false) Then
				Me.OnPurchaseIDChanging(value)
				Me.SendPropertyChanging
				Me._PurchaseID = value
				Me.SendPropertyChanged("PurchaseID")
				Me.OnPurchaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MovieScheduleID", DbType:="Int NOT NULL")>  _
	Public Property MovieScheduleID() As Integer
		Get
			Return Me._MovieScheduleID
		End Get
		Set
			If ((Me._MovieScheduleID = value)  _
						= false) Then
				If Me._MovieSchedule.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMovieScheduleIDChanging(value)
				Me.SendPropertyChanging
				Me._MovieScheduleID = value
				Me.SendPropertyChanged("MovieScheduleID")
				Me.OnMovieScheduleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VisitDate", DbType:="Date NOT NULL")>  _
	Public Property VisitDate() As Date
		Get
			Return Me._VisitDate
		End Get
		Set
			If ((Me._VisitDate = value)  _
						= false) Then
				Me.OnVisitDateChanging(value)
				Me.SendPropertyChanging
				Me._VisitDate = value
				Me.SendPropertyChanged("VisitDate")
				Me.OnVisitDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalPrice", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property TotalPrice() As Decimal
		Get
			Return Me._TotalPrice
		End Get
		Set
			If ((Me._TotalPrice = value)  _
						= false) Then
				Me.OnTotalPriceChanging(value)
				Me.SendPropertyChanging
				Me._TotalPrice = value
				Me.SendPropertyChanged("TotalPrice")
				Me.OnTotalPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Purchase_PurchasedSeat", Storage:="_PurchasedSeats", ThisKey:="PurchaseID", OtherKey:="PurchaseID")>  _
	Public Property PurchasedSeats() As EntitySet(Of PurchasedSeat)
		Get
			Return Me._PurchasedSeats
		End Get
		Set
			Me._PurchasedSeats.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MovieSchedule_Purchase", Storage:="_MovieSchedule", ThisKey:="MovieScheduleID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property MovieSchedule() As MovieSchedule
		Get
			Return Me._MovieSchedule.Entity
		End Get
		Set
			Dim previousValue As MovieSchedule = Me._MovieSchedule.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MovieSchedule.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MovieSchedule.Entity = Nothing
					previousValue.Purchases.Remove(Me)
				End If
				Me._MovieSchedule.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Purchases.Add(Me)
					Me._MovieScheduleID = value.Id
				Else
					Me._MovieScheduleID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("MovieSchedule")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PurchasedSeats(ByVal entity As PurchasedSeat)
		Me.SendPropertyChanging
		entity.Purchase = Me
	End Sub
	
	Private Sub detach_PurchasedSeats(ByVal entity As PurchasedSeat)
		Me.SendPropertyChanging
		entity.Purchase = Nothing
	End Sub
End Class
